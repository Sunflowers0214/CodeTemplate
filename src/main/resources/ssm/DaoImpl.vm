package ${packageName}.${projectName}.dao.ibatis;

import java.util.List;
import java.util.Map;
import ${keyBean};
import ${pageBean};
import ${basePath}.BaseDao;
import ${packageName}.${projectName}.dao.${builder.firstToUpper(${tableModel.tableLabel})}Dao;
import ${packageName}.${projectName}.model.${builder.firstToUpper(${tableModel.tableLabel})};

/**
 * @description $tableModel.tableComment数据层实现
 * @author ${author}
 * @version 1.0.0
 * @createtime $time
 */
public class ${builder.firstToUpper(${tableModel.tableLabel})}DaoImpl extends BaseDao implements ${builder.firstToUpper(${tableModel.tableLabel})}Dao {

	private final String NAMESPACE = "${packageName}.${projectName}.dao.${builder.firstToUpper(${tableModel.tableLabel})}Dao";

	@Override
	public ${builder.firstToUpper(${tableModel.tableLabel})} insert(${builder.firstToUpper(${tableModel.tableLabel})} entity){
#foreach($field in $tableModel.columnPKList)
		entity.set${builder.firstToUpper($field.columnLabel)}(UUIDUtil.genKey());
#end
		super.insert(NAMESPACE + ".insert${builder.firstToUpper(${tableModel.tableLabel})}", entity);
		return entity;
	}

	@Override
	public int delete(${builder.firstToUpper(${tableModel.tableLabel})} entity){
		return super.delete(NAMESPACE + ".delete${builder.firstToUpper(${tableModel.tableLabel})}", entity);
	}

	@Override
	public int update(${builder.firstToUpper(${tableModel.tableLabel})} entity){
		return super.update(NAMESPACE + ".update${builder.firstToUpper(${tableModel.tableLabel})}", entity);
	}

	@Override
	public ${builder.firstToUpper(${tableModel.tableLabel})} get(${builder.firstToUpper(${tableModel.tableLabel})} entity){
		return (${builder.firstToUpper(${tableModel.tableLabel})})super.queryForObject(NAMESPACE + ".get${builder.firstToUpper(${tableModel.tableLabel})}", entity);
	}

	@Override
	public List getList(${builder.firstToUpper(${tableModel.tableLabel})} entity){
		return super.queryForList(NAMESPACE + ".get${builder.firstToUpper(${tableModel.tableLabel})}List", entity);
	}

	@Override
	public Page getForPage(Map map, int pageNo, int pageSize, String pageSort){
		map.put("pageSort", pageSort);
		return super.queryForPageHelper(NAMESPACE + ".get${builder.firstToUpper(${tableModel.tableLabel})}Page", map, pageNo,pageSize);
	}

}
